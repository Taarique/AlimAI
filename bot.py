import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters
from config import TELEGRAM_BOT_TOKEN, GEMINI_API_KEY
from gemini_integration import get_gemini_response, reset_conversation

# рж▓ржЧрж┐ржВ рж╕рзЗржЯржЖржк ржХрж░рзБржи
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logging.getLogger("httpx").setLevel(logging.WARNING)  # HTTPX рж▓рж╛ржЗржмрзНрж░рзЗрж░рж┐рж░ рж▓ржЧрж┐ржВ рж▓рзЗржнрзЗрж▓ ржХржорж╛ржирзЛ
logger = logging.getLogger(__name__)

# --- ржХржорж╛ржирзНржб ржПржмржВ ржорзЗрж╕рзЗржЬ рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ ржлрж╛ржВрж╢ржиржЧрзБрж▓рзЛ ржПржЦрж╛ржирзЗ рж╕ржВржЬрзНржЮрж╛ржпрж╝рж┐ржд ржХрж░рзБржи (main() ржлрж╛ржВрж╢ржирзЗрж░ ржЖржЧрзЗ) ---

async def start(update: Update, context):
    """ржмржЯ рж╢рзБрж░рзБ рж╣рж▓рзЗ рж╕рзНржмрж╛ржЧрждржо ржмрж╛рж░рзНрждрж╛ ржкрж╛ржарж╛ржпрж╝ред"""
    user_name = update.effective_user.first_name
    welcome_message = (
        f"ржЖрж╕рж╕рж╛рж▓рж╛ржорзБ ржЖрж▓рж╛ржЗржХрзБржо ржУржпрж╝рж╛ рж░рж╛рж╣ржорж╛рждрзБрж▓рзНрж▓рж╛рж╣, {user_name}!\n\n"
        "ржЖржорж┐ AlimAI, ржЖржкржирж╛рж░ ржЗрж╕рж▓рж╛ржорзА ржЬрзНржЮрж╛ржи ржЕрж░рзНржЬржирзЗрж░ ржбрж┐ржЬрж┐ржЯрж╛рж▓ рж╕ржЩрзНржЧрзАред "
        "ржХрзЛрж░ржЖржи, рж╣рж╛ржжрж┐рж╕, ржлрж┐ржХрж╣, ржорж╛ржирждрж┐ржХ, ржЗрждрж┐рж╣рж╛рж╕ ржПржмржВ ржмрж┐ржЬрзНржЮрж╛ржи рж╕рж╣ ржЗрж╕рж▓рж╛ржорзА ржЬрзНржЮрж╛ржирзЗрж░ ржмрж┐ржнрж┐ржирзНржи ржмрж┐рж╖ржпрж╝рзЗ ржЖржкржирж╛ржХрзЗ рж╕рж╣рж╛ржпрж╝рждрж╛ ржХрж░рждрзЗ ржЖржорж┐ ржкрзНрж░рж╕рзНрждрзБрждред\n\n"
        "ржЖржкржирж┐ ржпрзЗ ржкрзНрж░рж╢рзНржи ржХрж░рждрзЗ ржЪрж╛ржи рждрж╛ ржкрж╛ржарж╛ржиред \n\n/restart ржмрж╛ /reset ржжрж┐ржпрж╝рзЗ ржХржиржнрж╛рж░рж╕рзЗрж╢ржи ржкрзБржирж░рж╛ржпрж╝ рж╢рзБрж░рзБ ржХрж░рждрзЗ ржкрж╛рж░рзЗржиред"
    )
    await update.message.reply_text(welcome_message)

async def reset(update: Update, context):
    """ржХржиржнрж╛рж░рж╕рзЗрж╢ржи рж░рж┐рж╕рзЗржЯ ржХрж░рзЗред"""
    reset_conversation()
    await update.message.reply_text("тЩ╗я╕П ржХржиржнрж╛рж░рж╕рзЗрж╢ржи рж░рж┐рж╕рзЗржЯ рж╣ржпрж╝рзЗржЫрзЗред ржПржЦржи ржЖржкржирж┐ ржирждрзБржи ржкрзНрж░рж╢рзНржи ржХрж░рждрзЗ ржкрж╛рж░рзЗржи ржЗржирж╢рж╛ржЖрж▓рзНрж▓рж╛рж╣ред")

async def handle_message(update: Update, context):
    """ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАрж░ ржорзЗрж╕рзЗржЬрзЗрж░ ржЙрждрзНрждрж░ ржжрзЗржпрж╝ред"""
    user_input = update.message.text
    response = get_gemini_response(user_input)
    await update.message.reply_text(response)

def main():
    """ржорзВрж▓ ржмржЯ ржЪрж╛рж▓рж╛ржирзЛрж░ ржлрж╛ржВрж╢ржи"""
    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("reset", reset))
    app.add_handler(CommandHandler("restart", reset))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logger.info("ЁЯдЦ AlimAI Bot рж╢рзБрж░рзБ рж╣ржпрж╝рзЗржЫрзЗ...")
    app.run_polling()

if __name__ == "__main__":
    main()
